// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using API_Clinica.Models;
using Microsoft.Data.SqlClient;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;
using System.Data;
using System.Threading;
using System.Threading.Tasks;

namespace API_Clinica.Models
{
    public partial class ADSCentralContext
    {
        private IADSCentralContextProcedures _procedures;

        public virtual IADSCentralContextProcedures Procedures
        {
            get
            {
                if (_procedures is null) _procedures = new ADSCentralContextProcedures(this);
                return _procedures;
            }
            set
            {
                _procedures = value;
            }
        }

        public IADSCentralContextProcedures GetProcedures()
        {
            return Procedures;
        }

        protected void OnModelCreatingGeneratedProcedures(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<usp_Lista_PacienteChatResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<usp_Medico_Espec_ConvenioChatResult>().HasNoKey().ToView(null);
            modelBuilder.Entity<usp_Separar_Consulta_AgendaChatResult>().HasNoKey().ToView(null);
        }
    }

    public partial class ADSCentralContextProcedures : IADSCentralContextProcedures
    {
        private readonly ADSCentralContext _context;

        public ADSCentralContextProcedures(ADSCentralContext context)
        {
            _context = context;
        }

        public virtual async Task<List<usp_Lista_PacienteChatResult>> usp_Lista_PacienteChatAsync(string Nome, DateTime? dtNascto, string cpf, string Celular, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "Nome",
                    Size = 100,
                    Value = Nome ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "dtNascto",
                    Value = dtNascto ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "cpf",
                    Size = 12,
                    Value = cpf ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                new SqlParameter
                {
                    ParameterName = "Celular",
                    Size = 10,
                    Value = Celular ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.VarChar,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_Lista_PacienteChatResult>("EXEC @returnValue = [dbo].[usp_Lista_PacienteChat] @Nome, @dtNascto, @cpf, @Celular", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_Medico_Espec_ConvenioChatResult>> usp_Medico_Espec_ConvenioChatAsync(int? idConvenio, int? idEspecialidade, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idConvenio",
                    Value = idConvenio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idEspecialidade",
                    Value = idEspecialidade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_Medico_Espec_ConvenioChatResult>("EXEC @returnValue = [dbo].[usp_Medico_Espec_ConvenioChat] @idConvenio, @idEspecialidade", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }

        public virtual async Task<List<usp_Separar_Consulta_AgendaChatResult>> usp_Separar_Consulta_AgendaChatAsync(int? idEspecialidade, int? idMedico, DateTime? dtConsulta, int? idConvenio, OutputParameter<int> returnValue = null, CancellationToken cancellationToken = default)
        {
            var parameterreturnValue = new SqlParameter
            {
                ParameterName = "returnValue",
                Direction = System.Data.ParameterDirection.Output,
                SqlDbType = System.Data.SqlDbType.Int,
            };

            var sqlParameters = new []
            {
                new SqlParameter
                {
                    ParameterName = "idEspecialidade",
                    Value = idEspecialidade ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "idMedico",
                    Value = idMedico ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                new SqlParameter
                {
                    ParameterName = "dtConsulta",
                    Value = dtConsulta ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Date,
                },
                new SqlParameter
                {
                    ParameterName = "idConvenio",
                    Value = idConvenio ?? Convert.DBNull,
                    SqlDbType = System.Data.SqlDbType.Int,
                },
                parameterreturnValue,
            };
            var _ = await _context.SqlQueryAsync<usp_Separar_Consulta_AgendaChatResult>("EXEC @returnValue = [dbo].[usp_Separar_Consulta_AgendaChat] @idEspecialidade, @idMedico, @dtConsulta, @idConvenio", sqlParameters, cancellationToken);

            returnValue?.SetValue(parameterreturnValue.Value);

            return _;
        }
    }
}
